{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monsters","id","alt","name","email","CardList","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","change","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,wBAAwBF,EAAMG,SAASC,GAAG,yBAA0BC,IAAI,aAClF,6BAAML,EAAMG,SAASG,OACrB,4BAAKN,EAAMG,SAASI,YCHfC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEMD,EAAMG,SAASM,KAAI,SAAAC,GAAO,OACxB,cAAC,EAAD,CAAuBP,SAAUO,GAAtBA,EAAQN,UCNlBO,G,MAAY,SAAC,GAAD,EAAEC,YAAF,IAAeC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAY,iBACZG,SAAUF,MC8BHG,G,wDA/Bb,aAAe,IAAD,8BACZ,gBAQFC,OAAS,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SANlD,EAAKC,MAAQ,CACXpB,SAAU,GACViB,YAAa,IALH,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEhB,SAASyB,S,oBAG1C,WACE,MAAkCC,KAAKN,MAA/BpB,EAAR,EAAQA,SAAUiB,EAAlB,EAAkBA,YACZU,EAAmB3B,EAAS4B,QAAO,SAAArB,GAAO,OAC9CA,EAAQJ,KAAK0B,cAAcC,SAASb,EAAYY,kBAClD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWY,aAAcgB,KAAKZ,SAC9B,cAAC,EAAD,CAAUd,SAAU2B,W,GA1BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f44130d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={'https://robohash.org/'+props.monsters.id+'?set=set2&size=180x180'} alt=\"monsters\" />\r\n        <h2>{ props.monsters.name }</h2>\r\n        <p>{ props.monsters.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => (\r\n    <div className=\"card-list\">\r\n        {\r\n          props.monsters.map(monster => (\r\n            <Card key={monster.id} monsters={monster}/>\r\n          ))\r\n        }\r\n    </div>\r\n);","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className=\"search\" \r\n        type=\"search\"\r\n        placeholder=\"search monster\"\r\n        onChange={handleChange}\r\n    />\r\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  change = e => this.setState({ searchField: e.target.value })\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters:users }));\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return(\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox handleChange={this.change}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}